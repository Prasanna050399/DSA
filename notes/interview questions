web dev : 	
	https://www.interviewbit.com/web-developer-interview-questions/

	points : 
		what is dom : 
			dom describes the logical structure of the documents and how one can manipulate them.
			These documents are usually treated as a tree structure in which every node is an object that represents a specific part of the document.
		what are drivers and navigators in pair programming : 
			the one that writes code is known as driver 
			and the one that is monitoring the code is known as navigator.
			the roles are inter changable.
		
		what is type coercion in javascript : 
			type coercion means the process of converting value from one data type to another either automatically or implicitly.
		
		difference between window.onload and onDocumentReady : 
			onload triggers when a web page is fully loaded, meaning DOM is loaded along with all the associated resources and then the code is executed
			onDocumentReady triggers when the dom is loaded, meaning other things like images, videos and other contents are not considered while triggering the event.
		
		best way to integrate different stylesheets into a website : 
			as per my understanding, since each angular component have a styles.css, what we can do is create a global style.css that will contain all the generic css information and then we can write any specific css in the local style.css
		
		how do you optimize the loading time of your web application : 
			image compression and optimization 
			put javascript and css in external files
			reduce the number of redirects
			css and javascript files should be loaded asynchronously 
			minify html, css and javascript code.
		
		different pop up objects available in js : 
			alert
			confirm -> okay returns true cancel returns false
			prompt -> has two buttons okay gives the user input value cancel returns null
		
		scope in js : 
			global scope :
			local scope : 
		
		what is ajax : 
			asynchronous javascript and xml :
				ajax refers to a set of technologies which are used for web dev that allows the web application to send and receive data asynchronously from the server without hampering the display or behaviour of the existing site
				
				using ajax we can exchange information from the server and upate a part of a webpage without reloading the entire web page.
				
		CDN in jquery : 
			content delivery networks are geographically distributed groups of servers that deliver internet content quickly.
			the servers are dispersed accross many physical and network locations this can significantly reduce the load times 
		
		what are css selectors :
			css selectors are used to select or specify html elements that they want to style.
				id selector :
					#idName
					So the element with the id idName will have the above css applied to it.
				
				class selector : 
					.className
					so the above css is applied to html element with class = "className"
				
				child selector or combinator : 
					div > p 
					so the above css is applied to all the p elements that are child of the div element
		
		what are pseudo-classes : 	
			This is used to define a special state of an html element.
			in css there are many pseudo-classes but the one that is most frequently used are : 
				selector : pseudo-class {}
			
			they are : 
				: visited 
				: hover 
				: active -> select the element that becomes active when the user clicks on it
				: focus -> select an element that is currently focused by the user.
		
		use of media queries : 
			used in css to create a responsive web design.
			meaning based on the user's screen or media type, the web page will change appearance.
			The following can be checked using media queries : 
				dimensions of the view port
				dimensions of the device
				orientation
				resolution
		
		what is long polling : 
			The client initiates a request to the server, typically through an HTTP request.

			Instead of immediately responding, the server holds the request open, keeping the connection active.

			If no new data is available, the server waits until it has something to send back.

			Once the server has new data or a predefined timeout occurs, it responds to the client with the latest information.

			Upon receiving the response, the client immediately sends another request to the server to maintain the connection.

			This cycle of sending requests and receiving responses continues, ensuring real-time updates.
				
database : 
	https://www.interviewbit.com/dbms-interview-questions/
	
postgres : 
	https://www.geeksforgeeks.org/postgresql/postgresql-interview-questions/

computer networks : 
	https://www.interviewbit.com/networking-interview-questions/
	
design patterns :
	https://www.interviewbit.com/design-patterns-interview-questions/
	
	creational :
		factory
		builder
		prototype
	structural : 
		adaptor 
		proxy
		bridge
		decorator
	behaviour :
		chain of responsibility
		command
		observer

Collections cheat sheet : 
	https://courses.cs.washington.edu/courses/cse143x/15wi/cheat_sheet.pdf
	
Converting an array to arrayList : 
	Integer number = new Integer[] {1, 2, 3};
	List<Integer> numbers = Arrays.asList(number);
	
how to create singleton class in java ? 
	1. make all the constructors private
	2. create a static method that returns an instance of that class.
	3. The instance is stored as a private static variable
	
	There are two types of instantiation lazy and early : 
		in lazy instantiation : 
			the instance is created when the method is called. 
			add a condition in the method to check if the private variable is null that is no instance is created as of now. If true, create a new instance. If false return already existing instance.
		in eary instantiation : 
			we can assign the instance to the private variable at the time of defining the variable.
			
what are rest APIs : 
	Rest or representational state transfer is an architectural style that defines a set of constraints that are required for creating web services.
	
	Rest api is a way of accessing web services in a simple and flexible way without having any processing.
	
	Request is made in the form of web url as : 
		GET : read a representation of resource
		POST : create a new resource. Post is neither safe nor idempotent
		PUT : update a new resource. Put is not safe but is idempotent
		DELETE :
	Response is in the form of anything, HTML, XML, Image or JSON.
	
	Idempotent : 
		sending a same request multiple times will produce the same result, without changing the state of the server or the resources
		
	Rest is stateless meaning that the requests are independent of each other or previous requests.
	
	
microservices : 
	https://www.interviewbit.com/microservices-interview-questions/
	
	main features of microservices : 
		decoupling
		componentization
		buisiness capabilities
		autonomy
		continious delivery
		responsibility
		decentralized governance
		agility
		
angular : 
	https://www.interviewbit.com/angular-interview-questions/
	
what is web pack in angular ? 	
	webpack is a static module bundler for modern js applications
	we configure the following things in webpack : 
		entry : the module where the webpack should start
		output : where webpack emits the bundles it create
		loaders : enable webpack to process more than just js files
		plugins : perform a wide range of tasks like minification
	All these configurations are kept in file : 
		webpack.config.js
	This file is not there for normal angular application using angular CLI.
	To run the angular application using webpack, after we use ng eject,
	we need to run
	npm run start
	which translates to 
	webpack-dev-server --port=4200
	for more information refer : 
		https://medium.com/hackernoon/webpack-for-angular-developers-c8584a60e627
what are functional interfaces ?
what is functional programming in java ?
what is difference between spring and spring boot?
	1. Main feature of spring is dependency injection 
	1. autoconfiguration is the main feature of spring boot
	
	2. need to explicitly set up the server for testing
	2. has embedded servers like jetty and tomcat
	
	3. requires to write lot of boiler plate code
	3. has less amount of boiler plate code
	
	4. does not provide in memory database
	4. provides in memory database like H2
	
	5. need developers to add dependencies manually
	5. provides starters which handles the dependencies internally
	
why do we need typescript over javascript?



topics : 
	o auth
	spring : 
		https://www.javatpoint.com/spring-interview-questions
		https://www.interviewbit.com/spring-interview-questions/
	spring boot
	angular : 
		https://github.com/Prasanna050399/angular-interview-questions 
		read till question : 
		52
		skipped : 
		53 till 63
		current : 
			66
	typescript/javascript
	mysql : 
		https://www.interviewbit.com/mysql-interview-questions/
	postgres : 
		https://www.interviewbit.com/sql-interview-questions/
	design pattern : 
		https://www.interviewbit.com/design-patterns-interview-questions/
	microservices
	maven : 
		https://www.javatpoint.com/maven-interview-questions
	functional programming : 
		https://www.geeksforgeeks.org/functional-programming-in-java-with-examples/
	java 
	java collections
	java what is optional keyword ?
		java reference book page number : 963
	java encapsulation vs abstraction ?
		https://www.geeksforgeeks.org/difference-between-abstraction-and-encapsulation-in-java-with-examples/
	java string builder vs string buffer ?
		https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder
		https://www.digitalocean.com/community/tutorials/string-vs-stringbuffer-vs-stringbuilder
		
		1. buffer synchronized
		1. builder non synchronized
		2. buffer thread safe
		2. builder not thread safe
		3. buffer slower
		3. builder faster
		4. available since 1.0
		4. available since 1.5
		
	java what all features are added in java 8 and java 11 ?
		jdk 8 : 
			lambda expressions
			date time api
			nashone -> unknown
			stream api
			method references
			forEach() method 
			stringJoiner
			default methods
		jdk 11 : 
			starting with JDK 11 we can run java file with a single command
			local variable syntax for lambda parameters
			JEP 321 HTTP client
			new methods in string class like : 
				isBlank()
				lines() -> splits the lines to return an array/collections
				strip() 
				repeat()
	what is the difference between postgres and mysql ?
		https://www.integrate.io/blog/postgresql-vs-mysql-which-one-is-better-for-your-use-case/
		https://www.geeksforgeeks.org/difference-between-rdbms-and-ordbms/
		
		postgres max limit : 32TB
		mysql : MyISAM max limit : 256TB
		
	java streams ?
	java reflections what are reflections? 
		reference book page number 1522
	java native methods ? 
		reference book page number 538
		https://www.geeksforgeeks.org/native-keyword-java/
	java hashmap ?
		reference book page number 893
	java tree map?
		reference book page number 895
	java file handling
	java modules
	kafka : 
		https://www.interviewbit.com/kafka-interview-questions/
		
		https://www.tutorialspoint.com/apache_kafka/index.htm
		
		https://www.javatpoint.com/apache-kafka
	northern trust info	
	
	jpa and hibernate : 
		jpa : 
			https://www.javatpoint.com/jpa-introduction
		hibernate : 
			what is hibernate : 
				Hibernate ORM is an object–relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database.
			https://www.baeldung.com/spring-boot-hibernate
			
			NOTE : if we have created an entity, it will create a table automatically. We only need Repository class for interacting with the database
	
	how to implement postgres in spring boot : 
		https://hackernoon.com/using-postgres-effectively-in-spring-boot-applications
	stream interface : 
		reference book chapter 29
		
	spring controllerAdvice ?
		https://www.scaler.com/topics/spring-boot/controller-advice/
	how to sort a hashmap ?
	difference between @Repository vs @Service?
		https://www.baeldung.com/spring-component-repository-service#:~:text=%40Service%20annotates%20classes%20at%20the,act%20as%20a%20database%20repository.
	
	if every class extends object, then how can it extend another class, because java allows the extension of only one class ?
		https://stackoverflow.com/questions/25542691/in-java-every-class-extends-object-then-how-it-extend-other-class-because-one-c
	
	how to connect java application to database (both with and without spring) ?
	process vs threads ? 
		https://www.geeksforgeeks.org/difference-between-process-and-thread/
	what is java inheritance?
		https://www.digitalocean.com/community/tutorials/inheritance-java-example
	
	object oriented concepts ?
		https://www.geeksforgeeks.org/object-oriented-programming-oops-concept-in-java/
	what is JSON and its use ?
		https://www.spiceworks.com/tech/devops/articles/what-is-json/
	give an example of poorly designed java application?
		I can give an example of this using the logs for the version one of the multi-omics app.
		If we consider from the desing perspective we cannot directly say that it was poorly designed 
	github or otherVSC tools?
	outline the SDLC?
		https://aws.amazon.com/what-is/sdlc/#:~:text=The%20software%20development%20lifecycle%20(SDLC,expectations%20during%20production%20and%20beyond.
	give 3 benefits of working in an agile team environment?
		https://builtin.com/agile/benefits-of-agile

	where do you see yourself in five years ?
		i still see myself in the development domain
		i want to explore few technologies, so my career goals are aligned with those techonologies, i would be working on them 
		
	what is your role in a team?
		my role in the team was majorly as a developer
		connecting with my seniors for design discussions
		was helping juniors to either review their code or help them with blockers
		connect with our tester
		if there was an issue with the stage environment code, then i also used to help them decode the issue.
		
	if you make a mistake how do you fix it?
		https://in.indeed.com/career-advice/interviewing/managerial-round-interview-questions

	What are some of the workplace successes that make you proud?
		there was a time in the project that I was working on 7 out of 10 tasks that were assigned to me and the dependency on me was so much that everyone was connecting with me. What I am trying to say was that I was able to make myself an important part of the project such that for the designing of version two, I was allowed to take part in the design discussions to check if some points are missed.
		Another one that I consider as success was when an architect was submitting the liscences list to the marketing team, he specifically asked me to check the list created by my team lead again. So that was the trust that i believe i earned.
		
	how do you resolve workplace conflicts ?
	if your team resist your idea what will i do?
	
	why do you want to work for northern trust?
	
	what is the callable interface 
	what is clonable interface
	how to rebalance in kafka or consumer rebalance 
	what is the difference between Thread.run and Thread.start()
	thread.notify
	thread.wait
	kafka consumer group 
	how can producer send a message to a particular partition in kafka
	synchronized thread : how to make a thread synchronized.
	
	
	what is 0,1 and all in kafka?	(mastercard)
	what is vertical partitioning in dbms? (mastercard)
	@async annotation vs completable future? (mastercard)
	how will you handle back pressure (mastercard)
	202 and 204 -> accepted and no-content (mastercard)
	performance improvement for api calls (mastercard)
	encryption algo we used ? (mastercard)
	caching (mastercard)
	what is your sla/tps? (mastercard)
	how to create immutable class in java 
	ArrayList vs List, Set vs List, Queue vs Stack  
	new features of java 17
	what are different ways to create java objects?
	completable futures?
	callable interface?
	
	
	@async annotation vs completable future?
	@Async and CompletableFuture both facilitate asynchronous programming in Java, but they operate at different levels and offer distinct advantages.
	@Async (Spring Framework):
	Purpose:
	@Async is a Spring annotation used to mark methods for asynchronous execution. When a method annotated with @Async is called, Spring executes it in a separate thread from a thread pool managed by Spring's task executor.
	Convenience:
	It offers a declarative way to make methods asynchronous without directly managing threads or executors. Spring handles the thread pool configuration and execution.
	Integration:
	It integrates seamlessly within Spring applications, leveraging Spring's dependency injection and aspect-oriented programming capabilities.
	Limitations:
	By default, @Async methods called from within the same class (self-invocation) will not be executed asynchronously due to Spring's proxy-based AOP implementation.
	CompletableFuture (Java 8):
	Purpose:
	CompletableFuture is a class in Java 8 that represents a future result of an asynchronous computation. It provides a rich API for composing, combining, and handling asynchronous tasks, including chaining operations and handling exceptions in a non-blocking manner.
	Flexibility:
	It offers fine-grained control over asynchronous operations, allowing for complex workflows and advanced error handling.
	Independence:
	It is a core Java feature and can be used in any Java application, not just Spring applications.
	Composition:
	Its strength lies in its ability to chain multiple asynchronous operations together, enabling complex data pipelines and reactive programming patterns.
	Key Differences Summarized:
	Scope:
	@Async is a Spring-specific annotation for making methods asynchronous within a Spring context, while CompletableFuture is a core Java utility for representing and managing asynchronous computations.
	Control:
	@Async provides a higher-level, more declarative approach to asynchronous execution, with Spring managing the underlying threads. CompletableFuture offers more explicit control over task execution and composition.
	Features:
	@Async primarily focuses on offloading method execution to a separate thread. CompletableFuture provides extensive features for chaining, combining, and handling the results and exceptions of asynchronous tasks.
	Usage:
	@Async is ideal for simple asynchronous tasks within a Spring application. CompletableFuture is better suited for complex asynchronous workflows, data pipelines, and situations requiring advanced composition and error handling.
	In essence, @Async is a convenience feature provided by Spring for basic asynchronous method execution, while CompletableFuture is a powerful, low-level tool for building sophisticated asynchronous systems in Java. They can also be used together, where an @Async method might return a CompletableFuture to enable further asynchronous composition.
	
	
how to create immutable class in java  ?

	1. Making an object immutable using the Proxy pattern involves intercepting operations that would typically modify the object's state and preventing them. This is achieved by creating a proxy object that wraps the original (mutable) object and enforces immutability rules.
	
	2.
	Declare the Class as final:
	This prevents other classes from extending it and potentially overriding methods or modifying its behavior, which could compromise immutability.
	Make All Fields private and final:
	private restricts direct access to the fields from outside the class.
	final ensures that the fields are initialized only once, typically in the constructor, and their values cannot be reassigned afterward.
	Provide a Constructor to Initialize All Fields:
	All fields must be initialized during object creation via a constructor. This is the only point where the state of the object is set.
	Do Not Provide Setter Methods:
	Setter methods would allow modification of the object's state after creation, violating the principle of immutability.
	Handle Mutable Objects Carefully (Defensive Copying):
	If your class contains references to mutable objects (e.g., Date, ArrayList), you must perform a deep copy of these objects in the constructor to prevent external modifications to the internal state.
	Similarly, when returning mutable objects from getter methods, return a defensive copy instead of the original reference. This ensures that callers cannot modify the internal state of your immutable object.
	Override equals() and hashCode() (Optional but Recommended):
	For proper behavior in collections like HashMap or HashSet, and for meaningful comparisons, override equals() and hashCode() to reflect the immutable state of the object.
	Example:
	Java

	import java.util.Date;

	public final class ImmutablePerson {
		private final String name;
		private final int age;
		private final Date birthDate; // Mutable object

		public ImmutablePerson(String name, int age, Date birthDate) {
			this.name = name;
			this.age = age;
			// Defensive copy for mutable object
			this.birthDate = new Date(birthDate.getTime()); 
		}

		public String getName() {
			return name;
		}

		public int getAge() {
			return age;
		}

		public Date getBirthDate() {
			// Defensive copy to prevent external modification
			return new Date(this.birthDate.getTime()); 
		}
	}

	Handling mutable objects within an immutable class requires careful implementation to preserve the immutability of the outer class. The core principle is to prevent external modifications to the mutable objects from affecting the internal state of the immutable class. This is achieved through defensive copying:
	In the Constructor: When initializing the immutable class, if it takes a mutable object as a constructor argument, create a deep copy of that mutable object and store the copy, not the original reference. This prevents external code from modifying the mutable object passed during construction and thus altering the immutable class's state.
	Java

		public final class ImmutableClass {
			private final List<String> mutableList;

			public ImmutableClass(List<String> list) {
				// Defensive copy in the constructor
				this.mutableList = new ArrayList<>(list);
			}

			// ... other methods
		}
	In Getter Methods: If the immutable class provides a getter method for a mutable object, return a deep copy of that object instead of the direct reference. This prevents external code from obtaining a reference to the internal mutable object and modifying it, which would violate the immutability of the outer class.
	Java

		public final class ImmutableClass {
			private final List<String> mutableList;

			// ... constructor

			public List<String> getMutableList() {
				// Defensive copy in the getter
				return new ArrayList<>(this.mutableList);
			}
		}
	Key Points:
	Deep Copy:
	Ensure the copy operation is a deep copy if the mutable object itself contains other mutable objects. A shallow copy would still leave references to nested mutable objects, compromising immutability.
	No Setters:
	Immutable classes should not have setter methods for any of their fields, including those that hold mutable objects.
	Final Fields:
	Declare all fields, including those holding mutable objects, as final to ensure they are assigned only once during construction.
	Final Class:
	Declare the class itself as final to prevent subclassing and potential modification of behavior by subclasses.






what is 0,1 and all in kafka?
	In Apache Kafka, "0, 1, and all" refer to the acks (acknowledgments) configuration setting for producers, which dictates the level of durability and performance trade-off for message writes.
	acks=0 (No Acknowledgement):
	The producer sends the message to the leader broker and does not wait for any acknowledgment.
	This offers the highest throughput and lowest latency but carries the highest risk of data loss. If the leader broker fails before writing the message to its log, the message is lost without the producer knowing.
	Suitable for use cases where some data loss is acceptable, such as metrics collection or log aggregation.
	acks=1 (Leader Acknowledgement):
	The producer sends the message to the leader broker and waits for an acknowledgment from the leader only.
	This provides a balance between performance and durability. The message is considered successfully written once the leader has received and written it to its log.
	Data loss can still occur if the leader fails after acknowledging but before the message is replicated to any in-sync replicas.
	acks=all (Full Acknowledgement):
	Also represented as acks=-1.
	The producer sends the message to the leader broker and waits for acknowledgment from the leader and all current in-sync replicas (ISRs).
	This offers the highest level of durability and guarantees no data loss as long as at least one in-sync replica remains alive.
	It comes with the lowest throughput and highest latency due to the need to wait for multiple acknowledgments.
	Often combined with min.insync.replicas broker configuration to ensure a minimum number of in-sync replicas are available before accepting writes.
	Ideal for critical data where data loss is unacceptable, such as financial transactions
	
	
	to set this configuration, we set the acks property in kafka producer properties : 
	

		props.put("acks", "all"); // Can also be "0" or "1"
	
		KafkaProducer<String, String> producer = new KafkaProducer<>(props);
		


	
	
what is vertical partitioning in dbms?	
	Vertical partitioning in DBMS refers to the process of splitting a database table by columns, creating multiple tables, each with a subset of the original table's columns. This approach aims to improve performance and manageability by reducing the number of columns accessed in common operations. 
	Vertical Partitioning vs Horizontal Partitioning - GeeksforGeeks
	Here's a more detailed explanation:
	How it works:
	Splitting by columns:
	Instead of storing all columns in one table, vertical partitioning divides them into multiple tables. 
	Shared primary key:
	Each resulting table typically includes the primary key of the original table, enabling joins to reconstruct the full record. 
	Reduced I/O:
	By partitioning columns based on access patterns, frequently accessed columns can be stored together, minimizing the data read during common queries. 
	Improved performance:
	Vertical partitioning can lead to faster query execution, especially when dealing with large tables containing many columns or when some columns are accessed much more frequently than others. 
	


how will you handle back pressure

	1. On the Consumer Side:
	Scaling Consumer Instances:
	The most common approach is to increase the number of consumer instances within a consumer group. Kafka's partitioning allows for parallel processing, so adding more consumers can distribute the load and increase consumption throughput.
	Optimizing Consumer Processing:
	Improve the efficiency of the consumer application itself. This could involve optimizing database queries, reducing network calls, or streamlining business logic to process messages faster.
	Explicit Polling and Controlled Consumption:
	Instead of relying on a continuous poll() loop, implement a controlled polling mechanism where the consumer only fetches new messages after successfully processing a previous batch. This can be achieved by pausing the consumer (e.g., using consumer.pause()) when a certain threshold of unhandled messages is reached and resuming (e.g., using consumer.resume()) once processing catches up.
	Batch Processing and Commit Control:
	Process messages in batches and commit offsets only after the entire batch has been successfully processed and persisted, ensuring data integrity even if the consumer slows down.
	2. On the Producer Side:
	Producer Throttling/Rate Limiting:
	Implement mechanisms to limit the rate at which producers send messages to Kafka, especially if the downstream system is known to have limited capacity. Kafka itself allows for setting quotas per client to throttle requests.
	Buffering and Asynchronous Sending:
	Producers can buffer messages before sending them to Kafka, using asynchronous sending to avoid blocking the producer thread while waiting for acknowledgements from the broker.
	3. System-Wide Considerations:
	Monitoring Consumer Lag:
	Continuously monitor consumer lag, which indicates how far behind a consumer is from the latest message in a partition. High or increasing lag is a clear sign of backpressure.
	Adjusting Kafka Configurations:
	Fine-tune Kafka broker and topic configurations, such as retention policies, batch sizes, and fetch configurations, to optimize performance and manage message flow.
	Implementing Exponential Backoff Strategies:
	For retrying failed operations in downstream systems, implement exponential backoff to give the system time to recover and prevent further overwhelming it with retries.



performance improvement for api calls
	Caching:
	Implement caching at multiple levels (server-side, client-side, CDN) to store frequently accessed data and reduce the need for repeated requests to the origin server or database.
	
	Payload Optimization:
	Compression: Use compression techniques (e.g., Gzip, Brotli) to reduce the size of data transferred over the network.
	Selective Fields/Partial Resources: Design APIs to allow clients to request only the necessary data fields, avoiding the transfer of unneeded information.
	Pagination and Filtering: For large datasets, implement pagination and filtering to retrieve data in manageable chunks, reducing payload size and processing time.
	
	Database Optimization:
	Efficient Queries: Write optimized database queries and ensure proper indexing of frequently queried columns.
	Connection Pooling: Utilize database connection pooling to reduce the overhead of establishing new connections for each request.
	
	Asynchronous Processing:
	Employ asynchronous programming to prevent blocking I/O operations from slowing down the API and allow for concurrent handling of requests.
	
	Minimize API Calls:
	Batch Requests: Group multiple related operations into a single API call when possible to reduce network round trips.
	Reduce Redundant Calls: Avoid making unnecessary or repeated calls for the same data within a short period.
	
	Infrastructure and Network:
	Content Delivery Networks (CDNs): Use CDNs to serve static assets and cached API responses from locations geographically closer to users, reducing latency.
	Load Balancing: Distribute incoming requests across multiple servers to prevent bottlenecks and ensure high availability.
	HTTP/2 Protocol: Leverage HTTP/2 for features like multiplexing and header compression, which can improve performance over HTTP/1.1.
	Monitoring and Testing:
	Implement robust monitoring to track API performance metrics (latency, error rates, throughput) and conduct regular load testing to identify and address performance bottlenecks proactively.
	
	

new features of java 17 :

	SEALED class : 
	
	A sealed class in Java is a feature introduced to restrict the inheritance hierarchy of a class or interface. It allows a developer to explicitly declare which classes are permitted to extend a sealed class or implement a sealed interface. This provides more control over the class hierarchy and prevents unintended or unauthorized extensions. 
	Key characteristics of sealed classes:
	Restricted Inheritance:
	A sealed class or interface explicitly lists the classes or interfaces that are allowed to extend or implement it using the permits keyword.
	Controlled Hierarchy:
	This mechanism ensures that only the specified subtypes can be created, leading to a more predictable and manageable class hierarchy.
	Subtype Requirements:
	Subclasses of a sealed class must be declared as one of the following:
	final: The subclass cannot be extended further.
	sealed: The subclass can be extended, but only by a specified set of classes (it also uses the permits keyword).
	non-sealed: The subclass can be extended without any restrictions.
	Enhanced Maintainability and Security:
	By limiting the inheritance, sealed classes can improve code maintainability, prevent unexpected behavior, and potentially enhance security by preventing the creation of malicious or unintended subclasses.
	Example:
	Java

	sealed class Shape permits Circle, Rectangle, Triangle {
		// ... common methods for shapes
	}

	final class Circle extends Shape {
		// ... circle specific methods
	}

	non-sealed class Rectangle extends Shape {
		// ... rectangle specific methods
	}

	sealed class Triangle extends Shape permits EquilateralTriangle {
		// ... triangle specific methods
	}

	final class EquilateralTriangle extends Triangle {
		// ... equilateral triangle specific methods
	}


what are different ways to create java objects?
	
	There are several ways to create objects in Java:
	Using the new keyword: This is the most common and straightforward method. It directly invokes a constructor of the class to create and initialize a new object.
	Java

		ClassName objectName = new ClassName();
	Using Class.forName().newInstance() (Reflection): This method allows creating an instance of a class dynamically at runtime. It requires the class to have a public no-argument constructor.
	Java

		Object obj = Class.forName("com.example.ClassName").newInstance();
	Using Constructor.newInstance() (Reflection): This provides more control than Class.newInstance(), allowing the invocation of parameterized or even private constructors.
	Java

		Constructor constructor = ClassName.class.getConstructor(String.class); // For a constructor with a String argument
		Object obj = constructor.newInstance("someValue");
	Using the clone() method: This method creates a shallow copy of an existing object. The class must implement the Cloneable interface and override the clone() method.
	Java

		MyObject originalObject = new MyObject();
		MyObject clonedObject = (MyObject) originalObject.clone();
	Using Deserialization: When an object is deserialized from a byte stream, a new object is created in memory without explicitly calling a constructor. The class must implement the Serializable interface.
	Java

		FileInputStream fileIn = new FileInputStream("object.ser");
		ObjectInputStream in = new ObjectInputStream(fileIn);
		MyObject deserializedObject = (MyObject) in.readObject();
	Using Factory Methods: A static method within a class or a separate factory class can encapsulate the object creation logic, providing a more controlled way to create instances.
	Java


	
	
	
	
	Web Security / Secure Coding
	What are the most common OWASP Top 10 vulnerabilities and how do you mitigate them in Java?

	How does SQL Injection work and how do you prevent it in Spring Boot?

	What is CSRF? How do you configure CSRF protection in Spring Security?

	Authentication & Authorization
	How would you implement JWT-based authentication in a microservice architecture?

	What is OAuth2 authorization code flow and how would you integrate it in a Spring Boot API?

	How do you design role-based access control using Spring Security authorities?

	Transport Security and Configuration
	How does TLS 1.3 differ from TLS 1.2? How would you enforce TLS configuration in Tomcat or Spring Boot apps?

	What security headers (like CSP, HSTS) would you configure for a REST backend?

	Secure Software Development
	What is SAST and DAST? How would you integrate static/dynamic code analysis in your CI pipeline?

	How do you manage third-party dependencies to avoid vulnerabilities?

	Incident Response / Log Auditing
	How would you securely log authentication failures or suspicious API calls?

	Describe how you would implement monitoring/alerts for security events in backend services.
	
	
	
manager round questions : 
	What is the relationship between leadership and management?
	Have you ever disagreed with coworkers or management? 
		yes there were a few occasions where we had disagreement within the team, but most of them were solved via a discussion. For eg. I was disagreeing with a field included in the table schema and i discussed this with my manager and she was satisfied with my reasoning and she agreed to it.
		There were also few occasions where we had a discussion and people realized that there might be a better way and then it was sorted out.
		There were also some occasions towards the end of my working period where we wanted to complete certain things and i was suggesting a better, but according to some instructions from senior management we didnt consider it and just implemented it. 
		So ideally discussions solved most of the disagreements, but due to some external factors we had to keep our differences aside and complete the task.
		
	what do you think is better service based or product based?
		as far as i understand, it depends on the project we are in, so lets say we are working in a service based organisation but the project is amazing the clients are amazing, they are liking you work and appreciating whatever we are doing, in that case, service base will be better, because, we then have on site opportunities, sometimes incentives, since the project is great, we enjoy working on it. 
		So there are kind of satisfaction both in terms of work and financial. So to some extent this cannot be achieved in product base. But again we hear about the work culture in product based is better that service based.
		so as per me, it depends on the project that we are working on.
		
	How do you introduce new concepts to your team?
	
	Can you please talk about your strength and weaknesses.
		Actually i though about this question few weeks ago so yeah i have an answer to it,
		for strength, I consider perseverance as on of my primary strength, then I also used to consider problem solving, but then i realized that it is like the basic necessity. I am easly motivated, I mean i just need to start thinking about my elder sister and my father and my causins and i get motivated.
		
		then to talk about my weaknesses, i consider that overthinking is probably my biggest weakness, it have some advantages though, you think about all the situations and then sometimes you are prepared for them.
		Then there was this feedback that i got from my manager, which i now believe was right, she used to tell me that learn to say no to people, because what used to happen was people from different teams used to connect for some help, so lets say some developer is having some issue, or our devops guy was facing some issue with stage or prod where she was getting some behaviour which was not preffered. 
	
	Please walk me through your resume
	What made you want to work for us?
		amdocs : 
			I mean the company is a market lead in terms of services provided for media and communication sector, for about 30 to 40 years, and then the job desciption was also aligning with my profile so I wanted to apply.
			
	What do you do if you make a mistake?
		the first thing that i used to do was to inform my manager about the mistake, luckiliy we were working in an environment where we used to follow that we will stop development on wednesday and let the tester test it on thursday and if there were some immediate high priority issues that she used to find, we used to work on it on friday. But in case that the issue was not a minor where it will take some time, then we used to do 2 things, first was add it to the defect sheet and also create an issue on github with the relevent information for developers to understand.
		
	If your thoughts conflict with your co-worker, how would you handle the situation?
	What keeps you going at work?
		i like to write program, so most of the time i am not stopping, but yeah if i feel very low, sometimes i take a break of 10 mins just to cut off from the development. So yeah that keeps me going.
		And i mean, this is what i want to create my career in so it works for me.
		And again if i feel low and nothing is motivating me like really edge case, then i just need to open linkedin and see all my peers working hard and it motivates me.
		also there was this movie which i used to love watching in college and school called bhag milkha bhag, and it used to motivate me.
		
	What should I do to prepare for the managerial interview?
	What do you want to achieve professionally in the long run?
	What will you do if your team is against your idea?
	How do you prioritize work for your team and yourself?
	What does Success mean to you?
		I was in an internal project so unless we sold our project, we didnt have any recognition as such, 
		So there used to be these assessments, so in the assessment, we had a scale out of 5, where 5 was excellent, 3 was you did your job, and 1 was you need to try harder.
		So actually both the manager and the employee used to assess. So i gave myself 3 which was task completed as per expectation and my manager actaully gave me 4 in all.
		
	What kind of work atmosphere would you prefer?
	Why do you have a career break?
	What is your reason for leaving your current position?
	What are your thoughts about our firm?
	What is your ideal job? 
	How can you help the company?
	if you got a chance, Which animal would you choose to be? 
	Have you ever held a position of leadership?
	Do you prefer the corner office or the one closest to the corridor? 
	What is the best term to describe your personality?
	How do you handle stress?
	What else would you instead do besides work? 
	Explain your previous responsibilities.
	What are your pay expectations?
	Have you got any questions for us?
	
	
	why did you leave previous job 
	why did you leave previous job even when you didnt have an offer 
	why do you want to work at amdocs
	
	what are work ethics to you like ?
		take responsibilities in both good and bad scenarios
		be honest in situations 
		no point in discussing a mistake need to start working on it.
		if we have a question ask it right away and dont think if this is a stupid question or not, because many times it helps getting a clear understanding
	
	questions to be asked for interview : 
		do you suggest any imporvement?
		which is the most important skill that you are searching in candidate
		can you describe the day to day responsibilities for this role?
		how is the return to office policy here?
		
		
	How Spring works internally.
	What is RAML, and why do we use it?
	What is a JPA repository and how we have implemented it in our project?
	
